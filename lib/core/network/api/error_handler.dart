import 'dart:io';

import 'package:dio/dio.dart';

/// ูุฆุฉ ูุฅุฏุงุฑุฉ ุงูุฃุฎุทุงุก ูุงูุงุณุชุซูุงุกุงุช ูู ุงูุชุทุจูู
class ErrorHandler {
  /// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ุงูุนุงูุฉ ูุฅุฑุฌุงุน ุฑุณุงูุฉ ุฎุทุฃ ููุงุณุจุฉ
  static String handleError(dynamic error) {
    if (error is DioException) {
      return _handleDioError(error);
    } else if (error is SocketException) {
      return 'ูุดู ุงูุงุชุตุงู ุจุงูุดุจูุฉุ ูุฑุฌู ุงูุชุญูู ูู ุงุชุตุงู ุงูุฅูุชุฑูุช';
    } else if (error is FormatException) {
      return 'ุญุฏุซ ุฎุทุฃ ูู ุชูุณูู ุงูุจูุงูุงุช';
    } else {
      return error.toString();
    }
  }

  /// ูุนุงูุฌุฉ ุฃุฎุทุงุก Dio ุนูุฏ ุงูุงุชุตุงู ุจุงูุฎุงุฏู
  static String _handleDioError(DioException error) {
    switch (error.type) {
      case DioExceptionType.connectionTimeout:
        return 'ุงูุชูุช ูููุฉ ุงูุงุชุตุงู ุจุงูุฎุงุฏู';
      case DioExceptionType.sendTimeout:
        return 'ุงูุชูุช ูููุฉ ุฅุฑุณุงู ุงูุจูุงูุงุช';
      case DioExceptionType.receiveTimeout:
        return 'ุงูุชูุช ูููุฉ ุงุณุชูุจุงู ุงูุจูุงูุงุช';
      case DioExceptionType.badResponse:
        return _handleDioResponseError(error);
      case DioExceptionType.cancel:
        return 'ุชู ุฅูุบุงุก ุงูุทูุจ';
      case DioExceptionType.connectionError:
        return 'ูุดู ุงูุงุชุตุงูุ ูุฑุฌู ุงูุชุญูู ูู ุงุชุตุงู ุงูุฅูุชุฑูุช';
      default:
        return 'ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุนุ ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู';
    }
  }

  /// ูุนุงูุฌุฉ ุฃุฎุทุงุก ุงุณุชุฌุงุจุฉ ุงูุฎุงุฏู ุจูุงุกู ุนูู ุฑูุฒ ุงูุญุงูุฉ
  static String _handleDioResponseError(DioException error) {
    final statusCode = error.response?.statusCode;
    final data = error.response?.data;

    if (data != null && data is Map && data.containsKey('Message')) {
      return data['Message'] as String;
    }

    switch (statusCode) {
      case 400:
        return 'ุทูุจ ุบูุฑ ุตุงูุญ';
      case 401:
        return 'ุบูุฑ ูุตุฑุญ ุจุงููุตููุ ูุฑุฌู ุชุณุฌูู ุงูุฏุฎูู';
      case 403:
        return 'ูุญุธูุฑ ุงููุตูู ุฅูู ูุฐุง ุงูููุฑุฏ';
      case 404:
        return 'ุงูููุฑุฏ ุงููุทููุจ ุบูุฑ ููุฌูุฏ';
      case 500:
        return 'ุฎุทุฃ ูู ุงูุฎุงุฏูุ ูุฑุฌู ุงููุญุงููุฉ ูุงุญููุง';
      default:
        return 'ุญุฏุซ ุฎุทุฃ (${statusCode ?? "Unknown"})';
    }
  }

  /// ุชุณุฌูู ุงูุฃุฎุทุงุก ููุชุญููู ูุงุญููุง
  static void logError(String tag, dynamic error, [StackTrace? stackTrace]) {
    // ููุง ูููู ุชุณุฌูู ุงูุฎุทุฃ ูู ุฎุฏูุฉ ุชุญููู ุงูุฃุฎุทุงุก ูุซู Firebase Crashlytics
    print('๐จ ERROR [$tag]: $error');
    if (stackTrace != null) {
      print('Stack trace: $stackTrace');
    }
  }
}
